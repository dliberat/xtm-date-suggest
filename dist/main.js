!function(e){var t={};function n(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)n.d(r,u,function(t){return e[t]}.bind(null,u));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=class{constructor(){this.panel=document.createElement("div"),this.panel.classList.add("autocomplete-panel"),this.panel.id="dates-autocomplete-popup",document.body.appendChild(this.panel),this.currentSuffix}foundTerm(e,t,n){const r=function(e,t){const n=document.createElement("span");n.classList.add("autocomplete-prefix"),n.innerText=e;const r=document.createElement("span");r.classList.add("autocomplete-suffix"),r.innerText=t;const u=document.createElement("span");return u.appendChild(n),u.appendChild(r),u}(t,this.setSuffix(t,n));this.panel.innerHTML="",this.panel.appendChild(r),this.isVisible()||this.setPanelPosition(t),this.panel.style.display="block",document.addEventListener("click",()=>this.hide())}hide(){document.removeEventListener("click",()=>this.hide()),this.panel.style.display="none"}isVisible(){return"none"!==this.panel.style.display}setSuffix(e,t){return this.currentSuffix=t.slice(e.length),this.currentSuffix}getSuffix(){return this.currentSuffix}setPanelPosition(e){const{x:t,y:n}=function(){let e=0,t=0;const n=window.getSelection();if(n.rangeCount){const r=n.getRangeAt(0).cloneRange();if(r.getClientRects&&(r.collapse(!0),r.getClientRects().length>0)){const n=r.getClientRects()[0];e=n.left,t=n.top}if(0===e&&0===t){const n=document.createElement("span");if(n.getClientRects){n.appendChild(document.createTextNode("​")),r.insertNode(n);const u=n.getClientRects()[0];e=u.left,t=u.top;const o=n.parentNode;o.removeChild(n),o.normalize()}}}return{x:e,y:t}}(),r=t-4*e.length,u=n-35;this.panel.style.top=`${u}px`,this.panel.style.left=`${r}px`}};const u=new Date,o=u.getFullYear(),i=[["([0-9]{4})\\u5E74([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5\\s?([0-2]?[0-9][\\u6642\\uFF1A:][0-5][0-9]\\uFF5E[0-2]?[0-9][\\u6642\\uFF1A:][0-5][0-9])","{$1-$2-$3} $4"],["([0-9]{4})\\u5E74([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5\\s?([0-2]?[0-9])[\\u6642\\uFF1A:]([0-5][0-9])","{$1-$2-$3 $4:$5}"],["([0-9]{4})/([0-1]?[0-9])/([0-3]?[0-9])","{$1-$2-$3}"],["([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5\\s?([0-2]?[0-9])[\\u6642\\uFF1A:]([0-5][0-9])",`{${o}-$1-$2 $3:$4}`],["([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5\\s?([0-2]?[0-9])\\u6642",`{${o}-$1-$2 $3:00}`],["([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5\\s?\\u306E([0-2]?[0-9])\\u6642",`{${o}-$1-$2 $3:00}`],["([0-9]{4})\\u5E74([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5","{$1-$2-$3}"],["([0-9]{4})\\.([0-1]?[0-9])\\.([0-3]?[0-9])","{$1-$2-$3}"],["([0-2]?[0-9])[:\\uFF1A]([0-5][0-9]) ([0-1]?[0-9])\\/([0-3]?[0-9])",`{${o}-$3-$4 $1:$2}`],["([0-1]?[0-9])\\/([0-3]?[0-9]).([0-2]?[0-9])[:\\uFF1A]([0-5][0-9])",`{${o}-$1-$2 $3:$4}`],["([0-1]?[0-9])\\u6708([0-3]?[0-9])\\u65E5",`{${o}-$1-$2}`],["[0-2]?[0-9]:[0-5][0-9]\\s?[-–\\uFF5E]\\s?([0-1]?[0-9])\\/([0-3]?[0-9]) ([0-2]?[0-9]:[0-5][0-9])",`{${o}-$1-$2 $3}`],["([0-1]?[0-9])\\/([0-3]?[0-9])[（(][\\u65E5\\u6708火水木金土][）)]",`{${o}-$1-$2}`],["([0-1]?[0-9])\\/([0-3]?[0-9])[\\u304B\\u307E][\\u3089\\u3067]",`{${o}-$1-$2}`],["([0-3]?[0-9])\\u65E5",`{${o}-${u.getMonth()+1}-$1}`]];function s(e,t,n){let r=t;return e.forEach(e=>{const t=new RegExp(e[0],n);r=r.replace(t,e[1])}),r}function c(e){let t=e;return t=function(e){return s([["([0-9]?[0-9])[\\u65E5\\u6642\\u5206][\\u9593\\u76EE]"," $1 "],["([0-9]+)\\u65E5\\u9023\\u7D9A"," $1 "],["[0-9]\\u65E5([0-9]+)\\u56DE"," $1 "]],e,"gi")}(t=function(e){return e.replace(/\u5341\u4E00/g,"11").replace(/\u5341\u4E8C/g,"12").replace(/\u5341\u4E09/g,"13").replace(/\u5341\u56DB/g,"14").replace(/\u5341\u4E94/g,"15").replace(/\u5341\u516D/g,"16").replace(/\u5341\u4E03/g,"17").replace(/\u5341\u516B/g,"18").replace(/\u5341\u4E5D/g,"19").replace(/\u4E8C\u5341/g,"20").replace(/\uFF12|\u4E8C/g,"2").replace(/\uFF13|\u4E09/g,"3").replace(/\uFF14|\u56DB/g,"4").replace(/\uFF15|\u4E94/g,"5").replace(/\uFF16|\u516D/g,"6").replace(/\uFF17|\u4E03/g,"7").replace(/\uFF18|\u516B/g,"8").replace(/\uFF19|\u4E5D/g,"9")}(t)),t=s(i,t,"gi")}function a(e,t,n,r=""){let u=Number(t);const o=Number(n),i=r.toLowerCase();12===u&&"am"===i&&(u=0),u<12&&"pm"===i&&(u+=12);let s=u.toString(),c=o.toString();return u<10&&(s=`0${s}`),o<10&&(c=`0${c}`),`${s}:${c}`}function l(e){return e.replace(/([0-2]?[0-9]):([0-5][0-9])([ap]m)?/gi,a)}var d=function(e){return function(e){return function(e,t,n=[]){let r;do{(r=t.exec(e))&&n.push(r)}while(r);return n}(e,new RegExp("{[0-9]{4}-[0-1]?[0-9]-[0-3]?[0-9]}|{[0-9]{4}-[0-1]?[0-9]-[0-3]?[0-9] [0-2]?[0-9]:[0-5][0-9][ap]?[m]?}","gi")).map(e=>e[0])}(c(e)).map(l)};var p=class{constructor(e){this.list={},this.dateFormat=e}addSegment(e){if(this.list[e])return;const t=document.getElementById(`sourceContent${e}`);d(t.innerText).map(e=>this.dateFormatter(e)).forEach(t=>{this.addTerm(e,t)})}addTerm(e,t){this.list[e]||(this.list[e]=[]),-1===this.list[e].indexOf(t)&&this.list[e].push(t)}dateFormatter(e){return e.replace(/{(\d{4})-([0-2]?[0-9])-([1-3]?[0-9])(?: ([0-2]?[0-9]):([0-5][0-9]))?}/,(...e)=>this.dateFormat.replacer(...e))}getSegmentArray(e){return this.list[e]||[]}};var h=class{constructor(e){this.element=e,this.caretPosition=function(){const e=window.getSelection().getRangeAt(0),t=window.getSelection();let n=0;const r=t.anchorNode.parentNode.childNodes;for(let e=0;e<r.length&&r[e]!==t.anchorNode;e+=1)r[e].outerHTML?n+=r[e].outerHTML.length:3===r[e].nodeType&&(n+=r[e].textContent.length);return e.startOffset+n}(),this.currentWord=this.getCurrentWord(this.elementContent(),this.caretPosition)}elementContent(){return this.element.value||this.element.innerText}getCurrentWord(e,t){const n=this.getWordBoundary(e,t);return e.slice(n,t)}getWordBoundary(e,t){const n=t-1;return n<0||" "===e[n]?n+1:this.getWordBoundary(e,n)}isMidWord(){const e=this.elementContent().charAt(this.caretPosition);return!(!e||" "===e)}};function g(e,t,n){const r=e.currentTarget;e.keyCode>=37&&e.keyCode<=40?t.hide():9===e.keyCode&&t.isVisible()&&(e.preventDefault(),function(e,t,n){const r=e.value?"value":"innerText",u=t.getSuffix();e[r]=function(e,t,n){const r=n.caretPosition;return e.substr(0,r)+t+e.substr(r)}(e[r],u,n),t.hide(),window.setTimeout(()=>{const t=document.createRange();t.setStart(e.childNodes[0],n.caretPosition+u.length),t.collapse(!0);const r=window.getSelection();r.removeAllRanges(),r.addRange(t)},5)}(r,t,n))}function f(e,t,n,r){if(n.length>0){const u=function(e,t){const n=e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),r=new RegExp(`^${n}`);for(let n=0;n<t.length;n+=1){const u=t[n];if(r.test(u)&&e!==u)return u}return null}(n,t);u?r.foundTerm(e,n,u):r.hide()}}class m{replacer(e,...t){return""}}class $ extends m{constructor(){super(),this.dateAndTime="hh:mm, MM DD",this.dateOnly="MM DD",this.months={1:"Jan.",2:"Feb.",3:"Mar.",4:"Apr.",5:"Mar.",6:"Jun.",7:"Jul.",8:"Aug.",9:"Sep.",10:"Oct.",11:"Nov.",12:"Dec."}}replacer(e,...t){return e.length>11?this.replaceDateTime(t):this.replaceDateOnly(t)}replaceDateOnly(e){const[,t,n]=e;return this.dateOnly.replace("MM",this.months[t]).replace("DD",n)}replaceDateTime(e){const[,t,n,r,u]=e;return this.dateAndTime.replace("MM",this.months[t]).replace("DD",n).replace("hh",r).replace("mm",u)}}const E=new $,y=new class extends ${constructor(){super(),this.months={1:"January",2:"February",3:"March",4:"April",5:"March",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"}}},F=new class extends ${constructor(){super(),this.dateAndTime="hh:mmPP, MM DD"}replaceDateTime(e){const[,t,n,r,u]=e;let o="am",i=parseInt(r,10);return i>11&&(i-=12,o="pm"),this.dateAndTime.replace("MM",this.months[t]).replace("DD",n).replace("hh",i.toString()).replace("mm",u).replace("PP",o)}};let x=new p(E);const b=new r;let v,M=[];function T(){document.querySelectorAll('td [id^="content"]').forEach(e=>{e.addEventListener("focus",e=>{M=function(e,t,n){t.hide();const r=Number(e.currentTarget.id.slice(7));return n.addSegment(r),n.getSegmentArray(r)}(e,b,x)}),e.addEventListener("click",()=>(function(e){e.hide()})(b)),e.addEventListener("input",e=>{v=function(e,t,n,r){return e.currentTarget.value||e.currentTarget.innerText?(!(n=new h(e.currentTarget)).isMidWord()&&n.currentWord.length>0?f(e.currentTarget,r,n.currentWord,t):n.currentWord.length<1&&t.hide(),n):(t.hide(),n)}(e,b,v,M)}),e.addEventListener("keydown",e=>g(e,b,v))})}function D(e){switch(e.target.value){case"basicShortMonth":x=new p(E);break;case"basicLongMonth":x=new p(y);break;case"shortMonthAMPM":x=new p(F)}}document.addEventListener("DOMContentLoaded",()=>{document.getElementById("dropdown").addEventListener("change",D),T()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,